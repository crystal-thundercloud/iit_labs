#include <stdio.h>
#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

int main()
{

/*
Дан целочисленный массив A размера N.
Назовем серией группу подряд идущих одинаковых элементов, а длиной серии — количество этих элементов
(длина серии может быть равна 1). Сформировать два новых целочисленных массива B и C одинакового размера,
записав в массив B длины всех серий исходного массива, а в массив C — значения элементов, образующих эти серии.
*/

cout<<R"(Дан целочисленный массив A размера N.
Назовем серией группу подряд идущих одинаковых элементов, а длиной серии — количество этих элементов
(длина серии может быть равна 1). Сформировать два новых целочисленных массива B и C одинакового размера,
записав в массив B длины всех серий исходного массива, а в массив C — значения элементов, образующих эти серии.)"<<"\n"<<endl;

int n, l, k;

cout<<"Введите размер массива: ";
cin>>n;

vector <int> a(n), b(n), c(n), d(n), e(n);

cout<<"Введите элементы массива:\n";
for (int i=0; i<n; i++) {
    cin>>a[i];
    c[i]=d[i]=e[i]=a[i];
}

auto bgn = c.cbegin();

for (int i=0; i<c.size(); i++) {
    bgn = c.cbegin();
    if (c[i-1]==c[i]) {
        c.erase(bgn+i);
        b[i-1]+=1;
        i--;
    }
    else b[i]+=1;
}

cout<<"В массив А входят следующие серии:";

for (int i=0; i<c.size(); i++) {
    cout<<"\n"<<b[i]<<" x "<<c[i];
}

cout<<endl;

/*
Дано целое число L (> 0) и целочисленный массив размера N.
Заменить каждую серию массива, длина которой больше L, на один элемент с нулевым значением
*/

cout<<"\n"<<R"(Дано целое число L (> 0) и целочисленный массив размера N.
Заменить каждую серию массива, длина которой больше L, на один элемент с нулевым значением)"<<"\n"<<endl;

cout<<"Введите целое число L (>0): ";
cin>>l;

k=1;
for (int i=0; i<d.size(); i++) {
    bgn = d.cbegin();
    if (d[i]==d[i+1]&&i!=d.size()-1) k++; //без второй части условия не удалялись серии в конце массива
    else if (k>l) {
        for (int j=0; j<k; j++) d.erase(bgn+i+1-k);
        d.insert(bgn+i+1-k, 0);
        i-=k-1;
        k=1;
    }
    else k=1;
}

cout<<"Массив с заменёнными сериями: ";
for (int i=0; i<d.size(); i++) {
    cout<<"\n"<<d[i];
}


/*
Дано целое число K (> 0) и целочисленный массив размера N.
Поменять местами последнюю серию массива и его серию с номером K 
*/

cout<<"\n"<<R"(Дано целое число K (> 0) и целочисленный массив размера N.
Поменять местами последнюю серию массива и его серию с номером K )"<<"\n"<<endl;

cout<<"Введите целое число K (>0): ";
cin>>k;

int estrt; //стартовая позиция серии с номером k
l=0;

if (k<c.size()&&c[k]!=c[c.size()-1]) {
    //стираем из массива последнюю серию и серию с номером k в два цикла
    for (int i=0; i<e.size(); i++) {
        for (int j=0; j<b[i]; j++) {
            if (i==c.size()-1) {
                bgn = e.cend();
                e.erase(bgn-1);
            }
        }
    }
    
    for (int i=0; i<e.size()-1; i++) {
        bgn = e.cbegin();
        for (int j=0; j<b[i]; j++) {
            if (i==k) {
                e.erase(bgn+l);
                estrt = l;
            }
            else l++;
        }
    }
    
    //вставка серий на места друг друга
    for (int j=0; j<b[c.size()-1]; j++) {
        e.insert(bgn+estrt, c[c.size()-1]);
    }
    
    bgn = e.cend();
    
    for (int j=0; j<b[k]; j++) {
        e.insert(bgn, c[k]);
    }
    
    /*cout<<"\nСерия с номером "<<k<<":";
    for (int j=0; j<b[k]; j++) {
        cout<<"\n"<<c[k];
    }
        
    cout<<"\nПоследняя серия:";
    for (int j=0; j<b[c.size()-1]; j++) {
        cout<<"\n"<<c[c.size()-1];
    }*/
    
    cout<<"\nМассив с переставленными сериями: ";
    for (int i=0; i<e.size(); i++) {
        cout<<"\n"<<e[i];
    }
    
}

else cout<<"Нет серии с номером "<<k<<" либо эта серия также является последней.";
cout<<endl;

/*
Дано множество A из N точек (точки заданы своими координатами x, y).
Среди всех точек этого множества, лежащих во второй четверти, найти точку, наиболее удаленную от начала координат.
Если таких точек нет, то вывести точку с нулевыми координатами
*/

cout<<"\n"<<R"(Дано множество A из N точек (точки заданы своими координатами x, y).
Среди всех точек этого множества, лежащих во второй четверти, найти точку, наиболее удаленную от начала координат.
Если таких точек нет, то вывести точку с нулевыми координатами)"<<"\n"<<endl;

cout<<"Введите целое число N (количество точек >2): ";
cin>>n;

int arr[n][2];

cout<<"Введите координаты точек (x, y):\n";
for (int i=0; i<n; i++) {
    cout<<"Координаты точки "<<i<<":\n";
    for (int j=0; j<2; j++) {
        cin>>arr[i][j];
    }
}

float res=0;
l=k=0;

for (int i=0; i<n; i++) {
    if (arr[i][0]<0&&arr[i][1]>0) {
        if (res<(sqrt((arr[i][0]*arr[i][0])+(arr[i][1]<1*arr[i][1]<1)))) {
            res=sqrt((arr[i][0]*arr[i][0])+(arr[i][1]<1*arr[i][1]<1));
            l = arr[i][0];
            k = arr[i][1];
        }
    }
}

if (res!=0) cout<<"Координаты наиболее удалённой точки: "<<l<<";"<<k<<endl;

/*
Дано множество A из N точек (N > 2, точки заданы своими координатами x, y).
Найти наибольший периметр треугольника, вершины которого принадлежат различным точкам множества A,
и сами эти точки (точки выводятся в том же порядке, в котором они перечислены при задании множества A).
*/

cout<<"\n"<<R"(Дано множество A из N точек (N > 2, точки заданы своими координатами x, y).
Найти наибольший периметр треугольника, вершины которого принадлежат различным точкам множества A,
и сами эти точки (точки выводятся в том же порядке, в котором они перечислены при задании множества A).)"<<"\n"<<endl;
 
int m = 0;
float p;

res = 0;
 
for (int i=0; i<n; i++) {
    for (int j=i+1; j<n; j++) {
        for (int k=j+1; k<n; k++) {                 
            p=0;                 
            p+=sqrt(pow(arr[i][0]-arr[j][0],2)+pow(arr[i][1]-arr[j][1],2));                 
            p+=sqrt(pow(arr[i][0]-arr[k][0],2)+pow(arr[i][1]-arr[k][1],2));                 
            p+=sqrt(pow(arr[j][0]-arr[k][0],2)+pow(arr[j][1]-arr[k][1],2));                 
            if (p > res) {
                l=i;
                k=j;
                m=k;
                res=p;
            }
        }
    }
}
 
cout<<"Наибольший периметр = "<<res<<" и образован следующими точками:";
cout<<"\n"<<arr[l][0]<<";"<<arr[l][1];
cout<<"\n"<<arr[k][0]<<";"<<arr[k][1];
cout<<"\n"<<arr[m][0]<<";"<<arr[m][1]<<endl;

}
