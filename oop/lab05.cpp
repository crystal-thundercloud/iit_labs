#define USE_MATH_DEFINES
#include <iostream>
#include <conio.h>
#include <math.h>

using namespace std;

class Int { //1
    private: int n;
    public: Int(int m=0) {
        n = m; //установка поля=0 или инициализация целым значением
    }

    int print() {
        return n; //возврат значения поля
    }

    void add(Int i, Int j) {
        n = i.n + j.n; //сложение двух значений типа Int
    }

};

class toLLBooth { //2
    private: unsigned int count;
    double sum;
    public: toLLBooth() {
        count = 0;
        sum = 0;
    }

    void payingCar() {
        count++;
        sum+=0.5;
    }

    void noPayCar() {
        count++;
    }

    void display() {
        cout<<"\nПроехало машин: "<<count<<"\nВыручка: "<<sum<<endl;
    }
};

class time { //3
    private: int h, m, s;
    public: time(int hh=0, int mm=0, int ss=0) {
        h = hh; //установка полей=0 или инициализация заданными значениями
        m = mm;
        s = ss;
    }

    void showTime() {
        cout<<h<<":"<<m<<":"<<s<<endl;
    }

    void sumTime(time t1, time t2) {
        h = t1.h + t2.h;
        m = t1.m + t2.m;
        s = t1.s + t2.s;
        while (s>=60||m>=60) {
            if (s>=60) {
                s-=60;
                m++;
            }
            if (m>60) {
                m-=60;
                h++;
            }
        }
    }
};

class date { //5
    private: int day, month, year;
    char ch = '/';
    public: date(int d=0, int m=0, int y=0) {
        day = d;
        month = m;
        year = y;
    }

    void getDate() {
        cin>>day>>ch>>month>>ch>>year;
    }

    void showDate() {
        cout<<day<<ch<<month<<ch<<year<<endl;
    }
};

enum etype { laborer, secretary, manager, accountant, executive, researcher }; //6

class employee { //4+6
    private: int phone;
    float salary;
    date data;
    etype dolj;
    char ch = '/';
    string dlj;

    public: employee(int ph=0, float sl=0) {
        phone = ph;
        salary = sl;
    }

    void enterInfo(int ph=0, float sl=0) { //4
        phone = ph;
        salary = sl;
    }

    void showInfo() { //4
        cout<<"\nТелефон: "<<phone<<"\nОклад: "<<salary<<"$"<<endl;
    }

    void putEmploy(int ph, float sl, date dt, etype dl) { //6
        phone = ph;
        salary = sl;
        data = dt;
        dolj = dl;
    }

    void getEmploy() { //6
        cout<<"\nТелефон: "<<phone<<"\nОклад: "<<salary<<"$"
        <<"\nДата принятия на работу: ";
        data.showDate();
        dlj = (dolj==laborer)? "laborer": ((dolj==secretary)? "secretary": ((dolj==manager)? "manager": ((dolj==accountant)? "accountant": ((dolj==executive)? "executive" : "researcher"))));
        cout<<"Должность: "<<dlj<<endl;
    }
};

int main()
{
    setlocale(LC_ALL, "Russian");

cout<<R"(1. Создайте класс Int, имитирующий стандартный тип int. Единственное поле этого класса должно иметь тип int.
Создайте методы, которые будут устанавливать значение поля, равным нулю, инициализировать его целым значением,
выводить значение поля на экран и складывать два значения типа Int.
Напишите программу, в которой будут созданы три объекта класса Int, два из которых будут инициализированы.
Сложите два инициализированных объекта, присвойте результат третьему, а затем отобразите результат на экране. )"<<endl;

Int i1(10);
Int i2(-3);
Int i3;

i3.add(i1, i2);

cout<<i1.print()<<" + "<<i2.print()<<" = "<<i3.print();
cout<<endl;

cout<<"\n"<<R"(2. Представьте пункт для взимания платежей за проезд по автостраде. Каждая проезжающая машина должна заплатить за проезд 50 центов,
однако часть машин платит за проезд, а часть проезжает бесплатно. В кассе ведется учет числа проехавших машин и суммарная выручка от платы за проезд.
Создайте модель такой кассы с помощью класса toLLBooth. Класс должен содержать два поля. Одно из них, типа unsigned int,
предназначено для учета количества проехавших автомобилей, а второе, имеющее тип double, будет содержать суммарную выручку от оплаты проезда.
Конструктор должен инициализировать оба поля нулевыми значениями. Метод payingCar() инкрементирует число машин и увеличивает на 0,50 суммарную выручку.
Другой метод, порауСаг(), увеличивает на единицу число автомобилей, но оставляет без изменения выручку. Метод display() выводит оба значения на экран.
Там, где это возможно, сделайте методы константными. Создайте программу, которая продемонстрирует работу класса. Программа должна предложить пользователю
нажать одну клавишу для того, чтобы сымитировать заплатившего автолюбителя, и другую клавишу, чтобы сымитировать недобросовестного водителя.
Нажатие клавиши Esc должно привести к выдаче текущих значений количества машин и выручки и завершению программы.  )"<<endl;

toLLBooth b;
char ch;

cout<<"Нажмите 1 для проезда машины без оплаты, 2 для проезда машины с оплатой, ESC для выхода.";

do {
    ch = getche();
    if (ch=='1') b.noPayCar();
    if (ch=='2') b.payingCar();
}

while (ch!=27);

b.display();

cout<<"\n"<<R"(3. Создайте класс с именем time, содержащий три поля типа int, предназначенные для хранения часов, минут и секунд.
Один из конструкторов класса должен инициализировать поля нулевыми значениями, а другой конструктор - заданным набором значений.
Создайте метод класса, который будет выводить значения полей на экран в формате 11:59:59, и метод, складывающий значения двух объектов типа time, передаваемых в качестве аргументов.
В функции main() следует создать два инициализированных объекта (подумайте, должны ли они быть константными) и один неинициализированный объект.
Затем сложите два инициализированных значения, а результат присвойте  третьему объекту и выведите его значение на экран. Где возможно, сделайте методы константными.)"<<endl;

time t1(8, 55, 51);
time t2(33, 46, 51);
time t3;

t3.sumTime(t1, t2);
t3.showTime();

cout<<"\n"<<R"(5. Взяв в качестве основы структуру из задачи 5 лабораторной работы 2, создайте класс date.
Его данные должны размещаться в трех полях типа int: month, day и year. Метод класса getdate() должен принимать значение для объекта
в формате 12/31/02, а метод showdate() - выводить данные на экран. )"<<endl;

date d;
cout<<"Введите дату в формате ДД/ММ/ГГГГ: ";
d.getDate();
d.showDate();

cout<<"\n"<<R"(4. Создайте класс employee, используя задачу 4 лабораторной работы 2. Класс должен включать поле типа int для хранения номера сотрудника
и поле типа float для хранения величины его оклада. Методы класса должны позволять пользователю вводить и отображать данные класса.
Напишите функцию main(), которая запросит пользователя ввести данные для трех сотрудников и выведет полученную информацию на экран.
+ 6. Расширьте содержание класса employee из задачи 4, включив в него класс date и перечисление etype (см. задачу 6 лабораторной работы 2).
Объект класса date будет использоваться для хранения даты приема сотрудника на работу. Перечисление будет использовано для хранения статуса сотрудника:
лаборант, секретарь, менеджер и т. д. Последние два поля данных должны быть закрытыми в определении класса employee, как и номер и оклад сотрудника.
Вам будет необходимо разработать методы getemploy() и putemploy(), предназначенные соответственно для ввода и отображения информации о сотруднике.
Возможно, при создании методов вам понадобится ветвление switch для работы с перечисляемым типом etype. Напишите функцию main(),
               которая попросит пользователя ввести данные о трех сотрудниках, а затем выведет эти данные на экран.)"<<endl;

employee em1, em2, em3;
int i;
float f;
char dlch;
etype dl;

cout<<"4. Введите данные трёх сотрудников через энтер или пробел: ";
cin>>i>>f;
em1.enterInfo(i, f);
cin>>i>>f;
em2.enterInfo(i, f);
cin>>i>>f;
em3.enterInfo(i, f);

em1.showInfo();
em2.showInfo();
em3.showInfo();

cout<<"\n"<<R"(6. Введите данные сотрудника через энтер или пробел - номер, зарплата, дата принятия на работу, первая буква должности.
Варианты должностей: laborer, secretary, manager, accountant, executive, researcher.
Пример: 1234567 14.5 12/03/2014 m)"<<endl;

cin>>i>>f;
d.getDate();
cin>>dlch;

dl = (dlch=='l')? laborer: ((dlch=='s')? secretary: ((dlch=='m')? manager : ((dlch=='a')? accountant : ((dlch=='e')? executive: researcher))));

em1.putEmploy(i, f, d, dl);
em1.getEmploy();

cout<<"\n"<<R"(7. В морской навигации координаты точки измеряются в градусах и минутах широты и долготы.
Например, координаты бухты Панити на о. Таити равны 149 градусов 34.8 минут восточной долготы и 17 градусов 31.5 минут южной широты.
Это записывается как 149°34.8' W, 17°31.5' S. Один градус равен 60 минутам (устаревшая система также делила одну минуту на 60 секунд, но сейчас минуту делят на обычные десятичные доли).
Долгота измеряется величиной от 0 до 180 градусов восточнее или западнее Гринвича. Широта принимает значения от 0 до 90 градусов севернее или южнее экватора.
Создайте класс angle, включающий следующие три поля: типа int для числа градусов, типа float для числа минут и типа char для указания направления (N, S, Е или W).
Объект этого класса может содержать значение как широты, так и долготы. Создайте метод, позволяющий ввести координату точки, направление, в котором она измеряется,
и метод, выводящий на экран значение этой координаты, например 179°59.9' Е. Кроме того, напишите конструктор, принимающий три аргумента. Напишите функцию mainQ, которая сначала создает переменную с помощью трехаргументного конструктора и выводит ее значение на экран, а затем циклически запрашивает пользователя ввести значение координаты и отображает введенное значение на экране. Для вывода символа градусов (°) можно воспользоваться символьной константой '\xF8'.  )"<<endl;



return 0;
}
